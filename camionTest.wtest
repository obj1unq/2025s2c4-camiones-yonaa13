import camion.*
import cosas.*
import almacen.*
import camino.*

describe "Tests de Camion" {
  test "el camión tiene las cosas cargadas" {
    camion.cargar(bumblebee)
    assert.equals(#{bumblebee}, camion.cosas())
    camion.cargar(knightRider)
    assert.equals(#{knightRider, bumblebee}, camion.cosas())
    camion.descargar(bumblebee)
    assert.equals(#{knightRider}, camion.cosas())
    assert.throwsExceptionWithMessage("No se puede cargar algo ya cargado",{camion.cargar(knightRider)})
    assert.throwsExceptionWithMessage("No se puede descargar algo que no está cargado",{camion.descargar(bumblebee)})
  }
  
  test "el camión tiene dos cosas cargadas" {
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    assert.equals(#{knightRider, bumblebee}, camion.cosas())
  }
  
  test "el camión tiene cargada solo a knightRider después de descargar a bumblebee" {
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    camion.descargar(bumblebee)
    assert.equals(#{knightRider}, camion.cosas())
  }
  
  test "hay una carga con peso 500" {
    camion.cargar(knightRider)
    assert.equals(true, camion.hayUnaCargaConPeso(500))
  }
  
  test "esta excedido de peso" {
    camion.cargar(knightRider)
    assert.equals(false, camion.estaExcedidoDePeso(2500))
  }
  
  test "cosa con nivel de peligrosidad " {
    bumblebee.transformado(true)
    camion.cargar(bumblebee)
    camion.cargar(bateríaAntiaérea)
    camion.cargar(residuoRadiactivo)
    assert.equals(bateríaAntiaérea, camion.conNivelDePeligrosidad(0))
    assert.equals(bumblebee, camion.conNivelDePeligrosidad(15))
    //assert.equals(bumblebee, camion.conNivelDePeligrosidad(30)) //debe romper, porque no se encuentra nada
    camion.descargar(bumblebee)
    bumblebee.transformado(false)
    camion.cargar(bumblebee)
    assert.equals(bumblebee, camion.conNivelDePeligrosidad(30))
    camion.descargar(bateríaAntiaérea)
    bateríaAntiaérea.bateriaEnMisiles(true)
    camion.cargar(bateríaAntiaérea)
    assert.equals(bateríaAntiaérea, camion.conNivelDePeligrosidad(100))
  }
  
  test "cosas mas peligrosa" {
    camion.cargar(knightRider)
    bateríaAntiaérea.bateriaEnMisiles(true)
    camion.cargar(bateríaAntiaérea)
    assert.equals(#{bateríaAntiaérea}, camion.tieneMayorNivelDePeligrosidad(15))
  }
  
  test "peso de contenedor portuario vacio es 100" {
    assert.equals(100, contenedorPortuario.peso())
  }
  
  test "peligrosidad de contenedor portuario vacio es 0" {
    assert.equals(0, contenedorPortuario.nivelPeligrosidad())
  }
  
  test "el camion tiene un peso entre 400 y 700" {
    camion.cargar(knightRider)
    assert.equals(true, camion.pesaEntre(400, 700))
  }
  
  test "cosa mas pesada del camion (bumblebee )" {
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    assert.equals(bumblebee, camion.cosaMasPesadaDelCamion())
  }
  
  test "peso de cada cosa del camion (knightRider 500, bumblebee 800)" {
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    assert.equals([500, 800], camion.pesoDeCadaCosaDelCamion())
  }
  
  test "cantidad de bultos del camion 9" {
    contenedorPortuario.cargar(knightRider)
    contenedorPortuario.cargar(bumblebee)
    embalaje.cosa(residuoRadiactivo)
    camion.cargar(embalaje)
    camion.cargar(contenedorPortuario)
    camion.cargar(arenaAGranel)
    paqueteDeLadrillos.cantidad(50)
    camion.cargar(paqueteDeLadrillos)
    camion.cargar(bateríaAntiaérea)
    assert.equals(9, camion.cantidadDeBultosDelCamion())
  }
  
  test "cantidad de bultos del camion 5" {
    paqueteDeLadrillos.cantidad(150)
    camion.cargar(paqueteDeLadrillos)
    bateríaAntiaérea.bateriaEnMisiles(true)
    camion.cargar(bateríaAntiaérea)
    camion.cargar(contenedorPortuario)
    assert.equals(5, camion.cantidadDeBultosDelCamion())
  }
  
  test "cantidad de bultos del camion 4" {
    paqueteDeLadrillos.cantidad(350)
    camion.cargar(paqueteDeLadrillos)
    camion.cargar(arenaAGranel)
    assert.equals(4, camion.cantidadDeBultosDelCamion())
  }
  
  test "camion accidentado caso 1" {
    contenedorPortuario.cargar(knightRider)
    bumblebee.transformado(true)
    contenedorPortuario.cargar(bumblebee)
    camion.cargar(contenedorPortuario)
    residuoRadiactivo.cantidad(30)
    embalaje.cosa(residuoRadiactivo)
    camion.cargar(embalaje)
    arenaAGranel.cantidad(50)
    camion.cargar(arenaAGranel)
    paqueteDeLadrillos.cantidad(100)
    camion.cargar(paqueteDeLadrillos)
    bateríaAntiaérea.bateriaEnMisiles(true)
    camion.cargar(bateríaAntiaérea)
    camion.camionAccidentado()
    assert.equals(false, bumblebee.transformado())
    assert.equals(30, residuoRadiactivo.peso())
    assert.equals(70, arenaAGranel.peso())
    assert.equals(88, paqueteDeLadrillos.cantidad())
    assert.equals(false, bateríaAntiaérea.bateriaEnMisiles())
  }
  
  test "camion accidentado caso 2" {
    camion.cargar(bumblebee)
    residuoRadiactivo.cantidad(30)
    camion.cargar(residuoRadiactivo)
    paqueteDeLadrillos.cantidad(10)
    camion.cargar(paqueteDeLadrillos)
    camion.cargar(bateríaAntiaérea)
    camion.camionAccidentado()
    assert.equals(true, bumblebee.transformado())
    assert.equals(45, residuoRadiactivo.peso())
    assert.equals(0, paqueteDeLadrillos.cantidad())
    assert.equals(false, bateríaAntiaérea.bateriaEnMisiles())
  }
  
  test "llego al almacen" {
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    almacen.cargarEnAlmacen(arenaAGranel)
    camion.llegoADestino(almacen)
    assert.equals(#{}, camion.cosas())
    assert.equals(#{knightRider, bumblebee, arenaAGranel}, almacen.cosasEnAlmacen())
  }
  
  test "ruta 9 exitoso" {
    almacen.cargarEnAlmacen(knightRider)
    almacen.cargarEnAlmacen(residuoRadiactivo)
    bumblebee.transformado(true)
    camion.cargar(bumblebee)
    arenaAGranel.cantidad(50)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, ruta9)
    assert.equals(#{}, camion.cosas())
    assert.equals(
      #{knightRider, residuoRadiactivo, bumblebee, arenaAGranel},
      almacen.cosasEnAlmacen()
    )
  }
  
  test "ruta 9 fallido por peligrosidad" {
    almacen.cargarEnAlmacen(knightRider)
    almacen.cargarEnAlmacen(residuoRadiactivo)
    camion.cargar(bumblebee)
    arenaAGranel.cantidad(50)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, ruta9)
    assert.equals(#{bumblebee, arenaAGranel}, camion.cosas())
    assert.equals(#{knightRider, residuoRadiactivo}, almacen.cosasEnAlmacen())
  }
  
  test "ruta 9 fallido por exedente de peso" {
    almacen.cargarEnAlmacen(knightRider)
    almacen.cargarEnAlmacen(residuoRadiactivo)
    camion.cargar(bumblebee)
    arenaAGranel.cantidad(2000)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, ruta9)
    assert.equals(#{bumblebee, arenaAGranel}, camion.cosas())
    assert.equals(#{knightRider, residuoRadiactivo}, almacen.cosasEnAlmacen())
  }
  
  test "caminos vecinales exitoso" {
    caminosVecinales.peso(2000)
    almacen.cargarEnAlmacen(knightRider)
    almacen.cargarEnAlmacen(residuoRadiactivo)
    bumblebee.transformado(true)
    camion.cargar(bumblebee)
    arenaAGranel.cantidad(50)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, caminosVecinales)
    assert.equals(#{}, camion.cosas())
    assert.equals(
      #{knightRider, residuoRadiactivo, bumblebee, arenaAGranel},
      almacen.cosasEnAlmacen()
    )
  }
  
  test "caminos vecinales fallido" {
    caminosVecinales.peso(300)
    almacen.cargarEnAlmacen(knightRider)
    almacen.cargarEnAlmacen(residuoRadiactivo)
    bumblebee.transformado(true)
    camion.cargar(bumblebee)
    arenaAGranel.cantidad(50)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, caminosVecinales)
    assert.equals(#{bumblebee, arenaAGranel}, camion.cosas())
    assert.equals(#{knightRider, residuoRadiactivo}, almacen.cosasEnAlmacen())
  }
}